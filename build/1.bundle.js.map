{"version":3,"sources":["webpack:///1.bundle.js","webpack:///./src/javascript/polyfills/classList.js","webpack:///./src/javascript/polyfills/dataset.js"],"names":["webpackJsonp","25","module","exports","self","document","createElement","createElementNS","testElement","classList","add","contains","createMethod","method","original","DOMTokenList","prototype","token","i","len","arguments","length","call","this","toggle","_toggle","force","view","classListProp","protoProp","elemCtrProto","Element","objCtr","Object","strTrim","String","trim","replace","arrIndexOf","Array","indexOf","item","DOMEx","type","message","name","code","DOMException","checkTokenAndGetIndex","test","ClassList","elem","trimmedClasses","getAttribute","classes","split","push","_updateClassName","setAttribute","toString","classListProto","classListGetter","Error","tokens","l","updated","remove","index","splice","result","join","defineProperty","classListPropDesc","get","enumerable","configurable","ex","number","__defineGetter__","26","Function","bind","oThis","TypeError","aArgs","slice","fToBind","FNOP","fBound","apply","concat","ObjectProto","defineGetter","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","hasOwnProp","hasOwnProperty","obj","prop","descriptor","value","writable","set","getOwnPropertyDescriptor","getter","setter","undefined","defineProperties","props","documentElement","dataset","propDescriptor","HTML5_DOMStringMap","attrVal","attrName","propName","attribute","that","attributes","attsLength","toUpperCase","n0","charAt","removeAttribute","e1","substr","e2","e"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAASC,EAAQC,GAEtB;ACQG,YAAcC,QAIZ,aAAeC,UAASC,cAAc,QACvCD,SAASE,iBAAqB,aAAeF,UAASE,gBAAgB,6BAA6B,OA4KvG,WAGC,GAAIC,GAAcH,SAASC,cAAc,IAMzC,IAJAE,EAAYC,UAAUC,IAAI,KAAM,OAI3BF,EAAYC,UAAUE,SAAS,MAAO,CACzC,GAAIC,GAAe,SAASC,GAC1B,GAAIC,GAAWC,aAAaC,UAAUH,EAEtCE,cAAaC,UAAUH,GAAU,SAASI,GACxC,GAAIC,GAAGC,EAAMC,UAAUC,MAEvB,KAAKH,EAAI,EAAGA,EAAIC,EAAKD,IACnBD,EAAQG,UAAUF,GAClBJ,EAASQ,KAAKC,KAAMN,IAI1BL,GAAa,OACbA,EAAa,UAOf,GAJAJ,EAAYC,UAAUe,OAAO,MAAM,GAI/BhB,EAAYC,UAAUE,SAAS,MAAO,CACxC,GAAIc,GAAUV,aAAaC,UAAUQ,MAErCT,cAAaC,UAAUQ,OAAS,SAASP,EAAOS,GAC9C,MAAI,KAAKN,aAAcG,KAAKZ,SAASM,KAAYS,EACxCA,EAEAD,EAAQH,KAAKC,KAAMN,IAMhCT,EAAc,SArNf,SAAUmB,GAIX,GAAM,WAAaA,GAAnB,CAEA,GACIC,GAAgB,YAChBC,EAAY,YACZC,EAAeH,EAAKI,QAAQF,GAC5BG,EAASC,OACTC,EAAUC,OAAON,GAAWO,MAAQ,WACpC,MAAOb,MAAKc,QAAQ,aAAc,KAElCC,EAAaC,MAAMV,GAAWW,SAAW,SAAUC,GAKnD,IAJA,GACIvB,GAAI,EACJC,EAAMI,KAAKF,OAERH,EAAIC,EAAKD,IACd,GAAIA,IAAKK,OAAQA,KAAKL,KAAOuB,EAC3B,MAAOvB,EAGX,WAGAwB,EAAQ,SAAUC,EAAMC,GACxBrB,KAAKsB,KAAOF,EACZpB,KAAKuB,KAAOC,aAAaJ,GACzBpB,KAAKqB,QAAUA,GAEfI,EAAwB,SAAUvC,EAAWQ,GAC7C,GAAc,KAAVA,EACF,KAAM,IAAIyB,GACN,aACA,6CAGN,IAAI,KAAKO,KAAKhC,GACZ,KAAM,IAAIyB,GACN,wBACA,uCAGN,OAAOJ,GAAWhB,KAAKb,EAAWQ,IAElCiC,EAAY,SAAUC,GAOtB,IANA,GACIC,GAAiBlB,EAAQZ,KAAK6B,EAAKE,aAAa,UAAY,IAC5DC,EAAUF,EAAiBA,EAAeG,MAAM,UAChDrC,EAAI,EACJC,EAAMmC,EAAQjC,OAEXH,EAAIC,EAAKD,IACdK,KAAKiC,KAAKF,EAAQpC,GAEpBK,MAAKkC,iBAAmB,WACtBN,EAAKO,aAAa,QAASnC,KAAKoC,cAGlCC,EAAiBV,EAAUrB,MAC3BgC,EAAkB,WAClB,MAAO,IAAIX,GAAU3B,MAmFzB,IA9EAmB,EAAMb,GAAaiC,MAAMjC,GACzB+B,EAAenB,KAAO,SAAUvB,GAC9B,MAAOK,MAAKL,IAAM,MAEpB0C,EAAejD,SAAW,SAAUM,GAElC,MADAA,IAAS,GACF+B,EAAsBzB,KAAMN,SAErC2C,EAAelD,IAAM,WACnB,GAIIO,GAHA8C,EAAS3C,UACTF,EAAI,EACJ8C,EAAID,EAAO1C,OAEX4C,GAAU,CAEd,GACEhD,GAAQ8C,EAAO7C,GAAK,GAChB8B,EAAsBzB,KAAMN,UAC9BM,KAAKiC,KAAKvC,GACVgD,GAAU,WAGL/C,EAAI8C,EAETC,IACF1C,KAAKkC,oBAGTG,EAAeM,OAAS,WACtB,GAIIjD,GAEAkD,EALAJ,EAAS3C,UACTF,EAAI,EACJ8C,EAAID,EAAO1C,OAEX4C,GAAU,CAGd,GAGE,KAFAhD,EAAQ8C,EAAO7C,GAAK,GACpBiD,EAAQnB,EAAsBzB,KAAMN,GAC7BkD,QACL5C,KAAK6C,OAAOD,EAAO,GACnBF,GAAU,EACVE,EAAQnB,EAAsBzB,KAAMN,WAG/BC,EAAI8C,EAETC,IACF1C,KAAKkC,oBAGTG,EAAepC,OAAS,SAAUP,EAAOS,GACvCT,GAAS,EAET,IACIoD,GAAS9C,KAAKZ,SAASM,GACvBJ,EAASwD,EACT3C,KAAU,GAAQ,SAElBA,KAAU,GAAS,KAOvB,OAJIb,IACFU,KAAKV,GAAQI,GAGXS,KAAU,GAAQA,KAAU,EACvBA,GAEC2C,GAGZT,EAAeD,SAAW,WACxB,MAAOpC,MAAK+C,KAAK,MAGftC,EAAOuC,eAAgB,CACzB,GAAIC,IACAC,IAAKZ,EACLa,YAAY,EACZC,cAAc,EAElB,KACE3C,EAAOuC,eAAezC,EAAcF,EAAe4C,GACnD,MAAOI,GACHA,EAAGC,uBACLL,EAAkBE,YAAa,EAC/B1C,EAAOuC,eAAezC,EAAcF,EAAe4C,SAG9CxC,GAAOH,GAAWiD,kBAC3BhD,EAAagD,iBAAiBlD,EAAeiC,KAG7CzD,QDuCI2E,GACA,SAAS7E,EAAQC,GAEtB,YEtDD,IA/JK6E,SAAShE,UAAUiE,OACpBD,SAAShE,UAAUiE,KAAO,SAAUC,GAEhC,GAAoB,kBAAT3D,MAEP,KAAM,IAAI4D,WAAU,uEAGxB,IAAIC,GAAQ7C,MAAMvB,UAAUqE,MAAM/D,KAAKF,UAAW,GAC9CkE,EAAU/D,KACVgE,EAAO,aACPC,EAAS,WACL,MAAOF,GAAQG,MACXlE,eAAgBgE,IAAQL,EAAQ3D,KAAO2D,EACxCE,EAAMM,OAAOnD,MAAMvB,UAAUqE,MAAM/D,KAAKF,aAOnD,OAHAmE,GAAKvE,UAAYO,KAAKP,UACtBwE,EAAOxE,UAAY,GAAIuE,GAEhBC;AA2Bd,WAEG,GAAIG,GAAc1D,OAAOjB,UACzB4E,EAAeD,EAAYb,iBAC3Be,EAAeF,EAAYG,iBAC3BC,EAAeJ,EAAYK,iBAC3BC,EAAeN,EAAYO,iBAC3BC,EAAaR,EAAYS,cAErBR,IAAgBC,GAAgBE,GAAgBE,IAE3ChE,OAAOsC,iBACRtC,OAAOsC,eAAiB,SAAU8B,EAAKC,EAAMC,GACzC,GAAInF,UAAUC,OAAS,EACnB,KAAM,IAAI8D,WAAU,yBAKxB,IAFAmB,GAAQ,GAEJH,EAAW7E,KAAKiF,EAAY,WACvBR,EAAazE,KAAK+E,EAAKC,IAAUL,EAAa3E,KAAK+E,EAAKC,KAEzDD,EAAIC,GAAQC,EAAWC,OAGtBL,EAAW7E,KAAKiF,EAAY,QAC5BJ,EAAW7E,KAAKiF,EAAY,QAG7B,KAAM,IAAIpB,WAAU,yCAM5B,MAAMoB,EAAWE,UAAYF,EAAW7B,YACpC6B,EAAW5B,cAEX,KAAM,IAAIQ,WACN,iHAYR,OAPIoB,GAAW9B,KACXmB,EAAatE,KAAK+E,EAAKC,EAAMC,EAAW9B,KAExC8B,EAAWG,KACXb,EAAavE,KAAK+E,EAAKC,EAAMC,EAAWG,KAGrCL,IAIVpE,OAAO0E,2BACR1E,OAAO0E,yBAA2B,SAAUN,EAAKC,GAC7C,GAAIlF,UAAUC,OAAS,EACnB,KAAM,IAAI8D,WAAU,0BAGxBmB,IAAQ,EAER,IAAIC,IACA5B,cAAc,EACdD,YAAc,EACd+B,UAAc,GAElBG,EAASb,EAAazE,KAAK+E,EAAKC,GAChCO,EAASZ,EAAa3E,KAAK+E,EAAKC,EAEhC,OAAKH,GAAW7E,KAAK+E,EAAKC,GAIrBM,GAAWC,SAOTN,GAAWE,SAClBF,EAAW9B,IAAM8B,EAAWG,IAAMI,OAE9BF,IACAL,EAAW9B,IAAMmC,GAEjBC,IACAN,EAAWG,IAAMG,GAGdN,IAhBHA,EAAWC,MAAQH,EAAIC,GAChBC,GAJAA,IAuBdtE,OAAO8E,mBACR9E,OAAO8E,iBAAmB,SAAUV,EAAKW,GACrC,GAAIV,EACJ,KAAKA,IAAQU,GACLb,EAAW7E,KAAK0F,EAAOV,IACvBrE,OAAOsC,eAAe8B,EAAKC,EAAMU,EAAMV,YAU1DjG,SAAS4G,gBAAgBC,SAEpBjF,OAAO0E,yBAAyB5E,QAAQf,UAAW,YACpDiB,OAAO0E,yBAAyB5E,QAAQf,UAAW,WAAWyD,KACjE,CACF,GAAI0C,IACAzC,YAAY,EACZD,IAAK,WAED,GAAIvD,GAEAkG,EACAC,EAASC,EAAUC,EACnBC,EAHAC,EAAOlG,KAIPmG,EAAanG,KAAKmG,WAClBC,EAAaD,EAAWrG,OACxBuG,EAAc,SAAUC,GACpB,MAAOA,GAAGC,OAAO,GAAGF,eAExBhB,EAAS,WACL,MAAOrF,OAEXsF,EAAS,SAAUS,EAAUd,GACzB,MAAyB,mBAAVA,GACXjF,KAAKmC,aAAa4D,EAAUd,GAC5BjF,KAAKwG,gBAAgBT,GAEjC,UAESxC,iBAAiB,OAAQ,cAC9BsC,KAEJ,MAAOY,GACHZ,EAAqB/G,SAASC,cAAc,OAEhD,IAAKY,EAAI,EAAGA,EAAIyG,EAAYzG,IAIxB,GAHAsG,EAAYE,EAAWxG,GAGnBsG,GAAaA,EAAU3E,MACtB,mBAAoBI,KAAKuE,EAAU3E,MAAO,CAC3CwE,EAAUG,EAAUhB,MACpBc,EAAWE,EAAU3E,KAErB0E,EAAWD,EAASW,OAAO,GAAG5F,QAAQ,MAAOuF,EAC7C,KACI3F,OAAOsC,eAAe6C,EAAoBG,GACtC7C,WAAYnD,KAAKmD,WACjBD,IAAKmC,EAAO3B,KAAKoC,GAAW,IAC5BX,IAAKG,EAAO5B,KAAKwC,EAAMH,KAG/B,MAAOY,GACHd,EAAmBG,GAAYF,GAI3C,MAAOD,IAGf,KAGInF,OAAOsC,eAAexC,QAAQf,UAAW,UAAWmG,GACtD,MAAOgB,GACLhB,EAAezC,YAAa,EAC5BzC,OAAOsC,eAAexC,QAAQf,UAAW,UAAWmG","file":"1.bundle.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 25:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/*\n\t * classList.js: Cross-browser full element.classList implementation.\n\t * 1.1.20150312\n\t *\n\t * By Eli Grey, http://eligrey.com\n\t * License: Dedicated to the public domain.\n\t *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n\t */\n\t\n\t/*global self, document, DOMException */\n\t\n\t/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\t\n\tif (\"document\" in self) {\n\t\n\t  // Full polyfill for browsers with no classList support\n\t  // Including IE < Edge missing SVGElement.classList\n\t  if (!(\"classList\" in document.createElement(\"_\")) || document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\"))) {\n\t\n\t    (function (view) {\n\t\n\t      \"use strict\";\n\t\n\t      if (!('Element' in view)) return;\n\t\n\t      var classListProp = \"classList\",\n\t          protoProp = \"prototype\",\n\t          elemCtrProto = view.Element[protoProp],\n\t          objCtr = Object,\n\t          strTrim = String[protoProp].trim || function () {\n\t        return this.replace(/^\\s+|\\s+$/g, \"\");\n\t      },\n\t          arrIndexOf = Array[protoProp].indexOf || function (item) {\n\t        var i = 0,\n\t            len = this.length;\n\t        for (; i < len; i++) {\n\t          if (i in this && this[i] === item) {\n\t            return i;\n\t          }\n\t        }\n\t        return -1;\n\t      }\n\t      // Vendors: please allow content code to instantiate DOMExceptions\n\t      ,\n\t          DOMEx = function DOMEx(type, message) {\n\t        this.name = type;\n\t        this.code = DOMException[type];\n\t        this.message = message;\n\t      },\n\t          checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {\n\t        if (token === \"\") {\n\t          throw new DOMEx(\"SYNTAX_ERR\", \"An invalid or illegal string was specified\");\n\t        }\n\t        if (/\\s/.test(token)) {\n\t          throw new DOMEx(\"INVALID_CHARACTER_ERR\", \"String contains an invalid character\");\n\t        }\n\t        return arrIndexOf.call(classList, token);\n\t      },\n\t          ClassList = function ClassList(elem) {\n\t        var trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\"),\n\t            classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : [],\n\t            i = 0,\n\t            len = classes.length;\n\t        for (; i < len; i++) {\n\t          this.push(classes[i]);\n\t        }\n\t        this._updateClassName = function () {\n\t          elem.setAttribute(\"class\", this.toString());\n\t        };\n\t      },\n\t          classListProto = ClassList[protoProp] = [],\n\t          classListGetter = function classListGetter() {\n\t        return new ClassList(this);\n\t      };\n\t      // Most DOMException implementations don't allow calling DOMException's toString()\n\t      // on non-DOMExceptions. Error's toString() is sufficient here.\n\t      DOMEx[protoProp] = Error[protoProp];\n\t      classListProto.item = function (i) {\n\t        return this[i] || null;\n\t      };\n\t      classListProto.contains = function (token) {\n\t        token += \"\";\n\t        return checkTokenAndGetIndex(this, token) !== -1;\n\t      };\n\t      classListProto.add = function () {\n\t        var tokens = arguments,\n\t            i = 0,\n\t            l = tokens.length,\n\t            token,\n\t            updated = false;\n\t        do {\n\t          token = tokens[i] + \"\";\n\t          if (checkTokenAndGetIndex(this, token) === -1) {\n\t            this.push(token);\n\t            updated = true;\n\t          }\n\t        } while (++i < l);\n\t\n\t        if (updated) {\n\t          this._updateClassName();\n\t        }\n\t      };\n\t      classListProto.remove = function () {\n\t        var tokens = arguments,\n\t            i = 0,\n\t            l = tokens.length,\n\t            token,\n\t            updated = false,\n\t            index;\n\t        do {\n\t          token = tokens[i] + \"\";\n\t          index = checkTokenAndGetIndex(this, token);\n\t          while (index !== -1) {\n\t            this.splice(index, 1);\n\t            updated = true;\n\t            index = checkTokenAndGetIndex(this, token);\n\t          }\n\t        } while (++i < l);\n\t\n\t        if (updated) {\n\t          this._updateClassName();\n\t        }\n\t      };\n\t      classListProto.toggle = function (token, force) {\n\t        token += \"\";\n\t\n\t        var result = this.contains(token),\n\t            method = result ? force !== true && \"remove\" : force !== false && \"add\";\n\t\n\t        if (method) {\n\t          this[method](token);\n\t        }\n\t\n\t        if (force === true || force === false) {\n\t          return force;\n\t        } else {\n\t          return !result;\n\t        }\n\t      };\n\t      classListProto.toString = function () {\n\t        return this.join(\" \");\n\t      };\n\t\n\t      if (objCtr.defineProperty) {\n\t        var classListPropDesc = {\n\t          get: classListGetter,\n\t          enumerable: true,\n\t          configurable: true\n\t        };\n\t        try {\n\t          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t        } catch (ex) {\n\t          // IE 8 doesn't support enumerable:true\n\t          if (ex.number === -0x7FF5EC54) {\n\t            classListPropDesc.enumerable = false;\n\t            objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t          }\n\t        }\n\t      } else if (objCtr[protoProp].__defineGetter__) {\n\t        elemCtrProto.__defineGetter__(classListProp, classListGetter);\n\t      }\n\t    })(self);\n\t  } else {\n\t    // There is full or partial native classList support, so just check if we need\n\t    // to normalize the add/remove and toggle APIs.\n\t\n\t    (function () {\n\t      \"use strict\";\n\t\n\t      var testElement = document.createElement(\"_\");\n\t\n\t      testElement.classList.add(\"c1\", \"c2\");\n\t\n\t      // Polyfill for IE 10/11 and Firefox <26, where classList.add and\n\t      // classList.remove exist but support only one argument at a time.\n\t      if (!testElement.classList.contains(\"c2\")) {\n\t        var createMethod = function createMethod(method) {\n\t          var original = DOMTokenList.prototype[method];\n\t\n\t          DOMTokenList.prototype[method] = function (token) {\n\t            var i,\n\t                len = arguments.length;\n\t\n\t            for (i = 0; i < len; i++) {\n\t              token = arguments[i];\n\t              original.call(this, token);\n\t            }\n\t          };\n\t        };\n\t        createMethod('add');\n\t        createMethod('remove');\n\t      }\n\t\n\t      testElement.classList.toggle(\"c3\", false);\n\t\n\t      // Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n\t      // support the second argument.\n\t      if (testElement.classList.contains(\"c3\")) {\n\t        var _toggle = DOMTokenList.prototype.toggle;\n\t\n\t        DOMTokenList.prototype.toggle = function (token, force) {\n\t          if (1 in arguments && !this.contains(token) === !force) {\n\t            return force;\n\t          } else {\n\t            return _toggle.call(this, token);\n\t          }\n\t        };\n\t      }\n\t\n\t      testElement = null;\n\t    })();\n\t  }\n\t}\n\n/***/ },\n\n/***/ 26:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * Add dataset support to elements\n\t * No globals, no overriding prototype with non-standard methods,\n\t *   handles CamelCase properly, attempts to use standard\n\t *   Object.defineProperty() (and Function bind()) methods,\n\t *   falls back to native implementation when existing\n\t * Inspired by http://code.eligrey.com/html5/dataset/\n\t *   (via https://github.com/adalgiso/html5-dataset/blob/master/html5-dataset.js )\n\t * Depends on Function.bind and Object.defineProperty/Object.getOwnPropertyDescriptor (polyfills below)\n\t * All code below is Licensed under the X11/MIT License\n\t*/\n\t\n\t// Inspired by https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\n\tif (!Function.prototype.bind) {\n\t    Function.prototype.bind = function (oThis) {\n\t        'use strict';\n\t\n\t        if (typeof this !== \"function\") {\n\t            // closest thing possible to the ECMAScript 5 internal IsCallable function\n\t            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n\t        }\n\t\n\t        var aArgs = Array.prototype.slice.call(arguments, 1),\n\t            fToBind = this,\n\t            FNOP = function FNOP() {},\n\t            fBound = function fBound() {\n\t            return fToBind.apply(this instanceof FNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n\t        };\n\t\n\t        FNOP.prototype = this.prototype;\n\t        fBound.prototype = new FNOP();\n\t\n\t        return fBound;\n\t    };\n\t}\n\t\n\t/*\n\t * Xccessors Standard: Cross-browser ECMAScript 5 accessors\n\t * http://purl.eligrey.com/github/Xccessors\n\t *\n\t * 2010-06-21\n\t *\n\t * By Eli Grey, http://eligrey.com\n\t *\n\t * A shim that partially implements Object.defineProperty,\n\t * Object.getOwnPropertyDescriptor, and Object.defineProperties in browsers that have\n\t * legacy __(define|lookup)[GS]etter__ support.\n\t *\n\t * Licensed under the X11/MIT License\n\t *   See LICENSE.md\n\t*/\n\t\n\t// Removed a few JSLint options as Notepad++ JSLint validator complaining and\n\t//   made comply with JSLint; also moved 'use strict' inside function\n\t/*jslint white: true, undef: true, plusplus: true,\n\t  bitwise: true, regexp: true, newcap: true, maxlen: 90 */\n\t\n\t/*! @source http://purl.eligrey.com/github/Xccessors/blob/master/xccessors-standard.js*/\n\t\n\t(function () {\n\t    'use strict';\n\t\n\t    var ObjectProto = Object.prototype,\n\t        defineGetter = ObjectProto.__defineGetter__,\n\t        defineSetter = ObjectProto.__defineSetter__,\n\t        lookupGetter = ObjectProto.__lookupGetter__,\n\t        lookupSetter = ObjectProto.__lookupSetter__,\n\t        hasOwnProp = ObjectProto.hasOwnProperty;\n\t\n\t    if (defineGetter && defineSetter && lookupGetter && lookupSetter) {\n\t\n\t        if (!Object.defineProperty) {\n\t            Object.defineProperty = function (obj, prop, descriptor) {\n\t                if (arguments.length < 3) {\n\t                    // all arguments required\n\t                    throw new TypeError(\"Arguments not optional\");\n\t                }\n\t\n\t                prop += \"\"; // convert prop to string\n\t\n\t                if (hasOwnProp.call(descriptor, \"value\")) {\n\t                    if (!lookupGetter.call(obj, prop) && !lookupSetter.call(obj, prop)) {\n\t                        // data property defined and no pre-existing accessors\n\t                        obj[prop] = descriptor.value;\n\t                    }\n\t\n\t                    if (hasOwnProp.call(descriptor, \"get\") || hasOwnProp.call(descriptor, \"set\")) {\n\t                        // descriptor has a value prop but accessor already exists\n\t                        throw new TypeError(\"Cannot specify an accessor and a value\");\n\t                    }\n\t                }\n\t\n\t                // can't switch off these features in ECMAScript 3\n\t                // so throw a TypeError if any are false\n\t                if (!(descriptor.writable && descriptor.enumerable && descriptor.configurable)) {\n\t                    throw new TypeError(\"This implementation of Object.defineProperty does not support\" + \" false for configurable, enumerable, or writable.\");\n\t                }\n\t\n\t                if (descriptor.get) {\n\t                    defineGetter.call(obj, prop, descriptor.get);\n\t                }\n\t                if (descriptor.set) {\n\t                    defineSetter.call(obj, prop, descriptor.set);\n\t                }\n\t\n\t                return obj;\n\t            };\n\t        }\n\t\n\t        if (!Object.getOwnPropertyDescriptor) {\n\t            Object.getOwnPropertyDescriptor = function (obj, prop) {\n\t                if (arguments.length < 2) {\n\t                    // all arguments required\n\t                    throw new TypeError(\"Arguments not optional.\");\n\t                }\n\t\n\t                prop += \"\"; // convert prop to string\n\t\n\t                var descriptor = {\n\t                    configurable: true,\n\t                    enumerable: true,\n\t                    writable: true\n\t                },\n\t                    getter = lookupGetter.call(obj, prop),\n\t                    setter = lookupSetter.call(obj, prop);\n\t\n\t                if (!hasOwnProp.call(obj, prop)) {\n\t                    // property doesn't exist or is inherited\n\t                    return descriptor;\n\t                }\n\t                if (!getter && !setter) {\n\t                    // not an accessor so return prop\n\t                    descriptor.value = obj[prop];\n\t                    return descriptor;\n\t                }\n\t\n\t                // there is an accessor, remove descriptor.writable;\n\t                // populate descriptor.get and descriptor.set (IE's behavior)\n\t                delete descriptor.writable;\n\t                descriptor.get = descriptor.set = undefined;\n\t\n\t                if (getter) {\n\t                    descriptor.get = getter;\n\t                }\n\t                if (setter) {\n\t                    descriptor.set = setter;\n\t                }\n\t\n\t                return descriptor;\n\t            };\n\t        }\n\t\n\t        if (!Object.defineProperties) {\n\t            Object.defineProperties = function (obj, props) {\n\t                var prop;\n\t                for (prop in props) {\n\t                    if (hasOwnProp.call(props, prop)) {\n\t                        Object.defineProperty(obj, prop, props[prop]);\n\t                    }\n\t                }\n\t            };\n\t        }\n\t    }\n\t})();\n\t\n\t// Begin dataset code\n\t\n\tif (!document.documentElement.dataset && (\n\t// FF is empty while IE gives empty object\n\t!Object.getOwnPropertyDescriptor(Element.prototype, 'dataset') || !Object.getOwnPropertyDescriptor(Element.prototype, 'dataset').get)) {\n\t    var propDescriptor = {\n\t        enumerable: true,\n\t        get: function get() {\n\t            'use strict';\n\t\n\t            var i,\n\t                that = this,\n\t                HTML5_DOMStringMap,\n\t                attrVal,\n\t                attrName,\n\t                propName,\n\t                attribute,\n\t                attributes = this.attributes,\n\t                attsLength = attributes.length,\n\t                toUpperCase = function toUpperCase(n0) {\n\t                return n0.charAt(1).toUpperCase();\n\t            },\n\t                getter = function getter() {\n\t                return this;\n\t            },\n\t                setter = function setter(attrName, value) {\n\t                return typeof value !== 'undefined' ? this.setAttribute(attrName, value) : this.removeAttribute(attrName);\n\t            };\n\t            try {\n\t                // Simulate DOMStringMap w/accessor support\n\t                // Test setting accessor on normal object\n\t                ({}).__defineGetter__('test', function () {});\n\t                HTML5_DOMStringMap = {};\n\t            } catch (e1) {\n\t                // Use a DOM object for IE8\n\t                HTML5_DOMStringMap = document.createElement('div');\n\t            }\n\t            for (i = 0; i < attsLength; i++) {\n\t                attribute = attributes[i];\n\t                // Fix: This test really should allow any XML Name without\n\t                //         colons (and non-uppercase for XHTML)\n\t                if (attribute && attribute.name && /^data-\\w[\\w\\-]*$/.test(attribute.name)) {\n\t                    attrVal = attribute.value;\n\t                    attrName = attribute.name;\n\t                    // Change to CamelCase\n\t                    propName = attrName.substr(5).replace(/-./g, toUpperCase);\n\t                    try {\n\t                        Object.defineProperty(HTML5_DOMStringMap, propName, {\n\t                            enumerable: this.enumerable,\n\t                            get: getter.bind(attrVal || ''),\n\t                            set: setter.bind(that, attrName)\n\t                        });\n\t                    } catch (e2) {\n\t                        // if accessors are not working\n\t                        HTML5_DOMStringMap[propName] = attrVal;\n\t                    }\n\t                }\n\t            }\n\t            return HTML5_DOMStringMap;\n\t        }\n\t    };\n\t    try {\n\t        // FF enumerates over element's dataset, but not\n\t        //   Element.prototype.dataset; IE9 iterates over both\n\t        Object.defineProperty(Element.prototype, 'dataset', propDescriptor);\n\t    } catch (e) {\n\t        propDescriptor.enumerable = false; // IE8 does not allow setting to true\n\t        Object.defineProperty(Element.prototype, 'dataset', propDescriptor);\n\t    }\n\t}\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 1.bundle.js\n **/","/*\n * classList.js: Cross-browser full element.classList implementation.\n * 1.1.20150312\n *\n * By Eli Grey, http://eligrey.com\n * License: Dedicated to the public domain.\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\nif (\"document\" in self) {\n\n// Full polyfill for browsers with no classList support\n// Including IE < Edge missing SVGElement.classList\nif (!(\"classList\" in document.createElement(\"_\"))\n  || document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\"))) {\n\n(function (view) {\n\n\"use strict\";\n\nif (!('Element' in view)) return;\n\nvar\n    classListProp = \"classList\"\n  , protoProp = \"prototype\"\n  , elemCtrProto = view.Element[protoProp]\n  , objCtr = Object\n  , strTrim = String[protoProp].trim || function () {\n    return this.replace(/^\\s+|\\s+$/g, \"\");\n  }\n  , arrIndexOf = Array[protoProp].indexOf || function (item) {\n    var\n        i = 0\n      , len = this.length\n    ;\n    for (; i < len; i++) {\n      if (i in this && this[i] === item) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  // Vendors: please allow content code to instantiate DOMExceptions\n  , DOMEx = function (type, message) {\n    this.name = type;\n    this.code = DOMException[type];\n    this.message = message;\n  }\n  , checkTokenAndGetIndex = function (classList, token) {\n    if (token === \"\") {\n      throw new DOMEx(\n          \"SYNTAX_ERR\"\n        , \"An invalid or illegal string was specified\"\n      );\n    }\n    if (/\\s/.test(token)) {\n      throw new DOMEx(\n          \"INVALID_CHARACTER_ERR\"\n        , \"String contains an invalid character\"\n      );\n    }\n    return arrIndexOf.call(classList, token);\n  }\n  , ClassList = function (elem) {\n    var\n        trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")\n      , classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []\n      , i = 0\n      , len = classes.length\n    ;\n    for (; i < len; i++) {\n      this.push(classes[i]);\n    }\n    this._updateClassName = function () {\n      elem.setAttribute(\"class\", this.toString());\n    };\n  }\n  , classListProto = ClassList[protoProp] = []\n  , classListGetter = function () {\n    return new ClassList(this);\n  }\n;\n// Most DOMException implementations don't allow calling DOMException's toString()\n// on non-DOMExceptions. Error's toString() is sufficient here.\nDOMEx[protoProp] = Error[protoProp];\nclassListProto.item = function (i) {\n  return this[i] || null;\n};\nclassListProto.contains = function (token) {\n  token += \"\";\n  return checkTokenAndGetIndex(this, token) !== -1;\n};\nclassListProto.add = function () {\n  var\n      tokens = arguments\n    , i = 0\n    , l = tokens.length\n    , token\n    , updated = false\n  ;\n  do {\n    token = tokens[i] + \"\";\n    if (checkTokenAndGetIndex(this, token) === -1) {\n      this.push(token);\n      updated = true;\n    }\n  }\n  while (++i < l);\n\n  if (updated) {\n    this._updateClassName();\n  }\n};\nclassListProto.remove = function () {\n  var\n      tokens = arguments\n    , i = 0\n    , l = tokens.length\n    , token\n    , updated = false\n    , index\n  ;\n  do {\n    token = tokens[i] + \"\";\n    index = checkTokenAndGetIndex(this, token);\n    while (index !== -1) {\n      this.splice(index, 1);\n      updated = true;\n      index = checkTokenAndGetIndex(this, token);\n    }\n  }\n  while (++i < l);\n\n  if (updated) {\n    this._updateClassName();\n  }\n};\nclassListProto.toggle = function (token, force) {\n  token += \"\";\n\n  var\n      result = this.contains(token)\n    , method = result ?\n      force !== true && \"remove\"\n    :\n      force !== false && \"add\"\n  ;\n\n  if (method) {\n    this[method](token);\n  }\n\n  if (force === true || force === false) {\n    return force;\n  } else {\n    return !result;\n  }\n};\nclassListProto.toString = function () {\n  return this.join(\" \");\n};\n\nif (objCtr.defineProperty) {\n  var classListPropDesc = {\n      get: classListGetter\n    , enumerable: true\n    , configurable: true\n  };\n  try {\n    objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n  } catch (ex) { // IE 8 doesn't support enumerable:true\n    if (ex.number === -0x7FF5EC54) {\n      classListPropDesc.enumerable = false;\n      objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n    }\n  }\n} else if (objCtr[protoProp].__defineGetter__) {\n  elemCtrProto.__defineGetter__(classListProp, classListGetter);\n}\n\n}(self));\n\n} else {\n// There is full or partial native classList support, so just check if we need\n// to normalize the add/remove and toggle APIs.\n\n(function () {\n  \"use strict\";\n\n  var testElement = document.createElement(\"_\");\n\n  testElement.classList.add(\"c1\", \"c2\");\n\n  // Polyfill for IE 10/11 and Firefox <26, where classList.add and\n  // classList.remove exist but support only one argument at a time.\n  if (!testElement.classList.contains(\"c2\")) {\n    var createMethod = function(method) {\n      var original = DOMTokenList.prototype[method];\n\n      DOMTokenList.prototype[method] = function(token) {\n        var i, len = arguments.length;\n\n        for (i = 0; i < len; i++) {\n          token = arguments[i];\n          original.call(this, token);\n        }\n      };\n    };\n    createMethod('add');\n    createMethod('remove');\n  }\n\n  testElement.classList.toggle(\"c3\", false);\n\n  // Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n  // support the second argument.\n  if (testElement.classList.contains(\"c3\")) {\n    var _toggle = DOMTokenList.prototype.toggle;\n\n    DOMTokenList.prototype.toggle = function(token, force) {\n      if (1 in arguments && !this.contains(token) === !force) {\n        return force;\n      } else {\n        return _toggle.call(this, token);\n      }\n    };\n\n  }\n\n  testElement = null;\n}());\n\n}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/javascript/polyfills/classList.js\n **/","/**\n * Add dataset support to elements\n * No globals, no overriding prototype with non-standard methods,\n *   handles CamelCase properly, attempts to use standard\n *   Object.defineProperty() (and Function bind()) methods,\n *   falls back to native implementation when existing\n * Inspired by http://code.eligrey.com/html5/dataset/\n *   (via https://github.com/adalgiso/html5-dataset/blob/master/html5-dataset.js )\n * Depends on Function.bind and Object.defineProperty/Object.getOwnPropertyDescriptor (polyfills below)\n * All code below is Licensed under the X11/MIT License\n*/\n\n// Inspired by https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        'use strict';\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            FNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(\n                    this instanceof FNOP && oThis ? this : oThis,\n                   aArgs.concat(Array.prototype.slice.call(arguments))\n               );\n            };\n\n        FNOP.prototype = this.prototype;\n        fBound.prototype = new FNOP();\n\n        return fBound;\n    };\n}\n\n/*\n * Xccessors Standard: Cross-browser ECMAScript 5 accessors\n * http://purl.eligrey.com/github/Xccessors\n *\n * 2010-06-21\n *\n * By Eli Grey, http://eligrey.com\n *\n * A shim that partially implements Object.defineProperty,\n * Object.getOwnPropertyDescriptor, and Object.defineProperties in browsers that have\n * legacy __(define|lookup)[GS]etter__ support.\n *\n * Licensed under the X11/MIT License\n *   See LICENSE.md\n*/\n\n// Removed a few JSLint options as Notepad++ JSLint validator complaining and\n//   made comply with JSLint; also moved 'use strict' inside function\n/*jslint white: true, undef: true, plusplus: true,\n  bitwise: true, regexp: true, newcap: true, maxlen: 90 */\n\n/*! @source http://purl.eligrey.com/github/Xccessors/blob/master/xccessors-standard.js*/\n\n(function () {\n    'use strict';\n    var ObjectProto = Object.prototype,\n    defineGetter = ObjectProto.__defineGetter__,\n    defineSetter = ObjectProto.__defineSetter__,\n    lookupGetter = ObjectProto.__lookupGetter__,\n    lookupSetter = ObjectProto.__lookupSetter__,\n    hasOwnProp = ObjectProto.hasOwnProperty;\n\n    if (defineGetter && defineSetter && lookupGetter && lookupSetter) {\n\n        if (!Object.defineProperty) {\n            Object.defineProperty = function (obj, prop, descriptor) {\n                if (arguments.length < 3) { // all arguments required\n                    throw new TypeError(\"Arguments not optional\");\n                }\n\n                prop += \"\"; // convert prop to string\n\n                if (hasOwnProp.call(descriptor, \"value\")) {\n                    if (!lookupGetter.call(obj, prop) && !lookupSetter.call(obj, prop)) {\n                        // data property defined and no pre-existing accessors\n                        obj[prop] = descriptor.value;\n                    }\n\n                    if ((hasOwnProp.call(descriptor, \"get\") ||\n                         hasOwnProp.call(descriptor, \"set\")))\n                    {\n                        // descriptor has a value prop but accessor already exists\n                        throw new TypeError(\"Cannot specify an accessor and a value\");\n                    }\n                }\n\n                // can't switch off these features in ECMAScript 3\n                // so throw a TypeError if any are false\n                if (!(descriptor.writable && descriptor.enumerable &&\n                    descriptor.configurable))\n                {\n                    throw new TypeError(\n                        \"This implementation of Object.defineProperty does not support\" +\n                        \" false for configurable, enumerable, or writable.\"\n                    );\n                }\n\n                if (descriptor.get) {\n                    defineGetter.call(obj, prop, descriptor.get);\n                }\n                if (descriptor.set) {\n                    defineSetter.call(obj, prop, descriptor.set);\n                }\n\n                return obj;\n            };\n        }\n\n        if (!Object.getOwnPropertyDescriptor) {\n            Object.getOwnPropertyDescriptor = function (obj, prop) {\n                if (arguments.length < 2) { // all arguments required\n                    throw new TypeError(\"Arguments not optional.\");\n                }\n\n                prop += \"\"; // convert prop to string\n\n                var descriptor = {\n                    configurable: true,\n                    enumerable  : true,\n                    writable    : true\n                },\n                getter = lookupGetter.call(obj, prop),\n                setter = lookupSetter.call(obj, prop);\n\n                if (!hasOwnProp.call(obj, prop)) {\n                    // property doesn't exist or is inherited\n                    return descriptor;\n                }\n                if (!getter && !setter) { // not an accessor so return prop\n                    descriptor.value = obj[prop];\n                    return descriptor;\n                }\n\n                // there is an accessor, remove descriptor.writable;\n                // populate descriptor.get and descriptor.set (IE's behavior)\n                delete descriptor.writable;\n                descriptor.get = descriptor.set = undefined;\n\n                if (getter) {\n                    descriptor.get = getter;\n                }\n                if (setter) {\n                    descriptor.set = setter;\n                }\n\n                return descriptor;\n            };\n        }\n\n        if (!Object.defineProperties) {\n            Object.defineProperties = function (obj, props) {\n                var prop;\n                for (prop in props) {\n                    if (hasOwnProp.call(props, prop)) {\n                        Object.defineProperty(obj, prop, props[prop]);\n                    }\n                }\n            };\n        }\n    }\n}());\n\n// Begin dataset code\n\nif (!document.documentElement.dataset &&\n         // FF is empty while IE gives empty object\n        (!Object.getOwnPropertyDescriptor(Element.prototype, 'dataset')  ||\n        !Object.getOwnPropertyDescriptor(Element.prototype, 'dataset').get)\n    ) {\n    var propDescriptor = {\n        enumerable: true,\n        get: function () {\n            'use strict';\n            var i,\n                that = this,\n                HTML5_DOMStringMap,\n                attrVal, attrName, propName,\n                attribute,\n                attributes = this.attributes,\n                attsLength = attributes.length,\n                toUpperCase = function (n0) {\n                    return n0.charAt(1).toUpperCase();\n                },\n                getter = function () {\n                    return this;\n                },\n                setter = function (attrName, value) {\n                    return (typeof value !== 'undefined') ?\n                        this.setAttribute(attrName, value) :\n                        this.removeAttribute(attrName);\n                };\n            try { // Simulate DOMStringMap w/accessor support\n                // Test setting accessor on normal object\n                ({}).__defineGetter__('test', function () {});\n                HTML5_DOMStringMap = {};\n            }\n            catch (e1) { // Use a DOM object for IE8\n                HTML5_DOMStringMap = document.createElement('div');\n            }\n            for (i = 0; i < attsLength; i++) {\n                attribute = attributes[i];\n                // Fix: This test really should allow any XML Name without\n                //         colons (and non-uppercase for XHTML)\n                if (attribute && attribute.name &&\n                    (/^data-\\w[\\w\\-]*$/).test(attribute.name)) {\n                    attrVal = attribute.value;\n                    attrName = attribute.name;\n                    // Change to CamelCase\n                    propName = attrName.substr(5).replace(/-./g, toUpperCase);\n                    try {\n                        Object.defineProperty(HTML5_DOMStringMap, propName, {\n                            enumerable: this.enumerable,\n                            get: getter.bind(attrVal || ''),\n                            set: setter.bind(that, attrName)\n                        });\n                    }\n                    catch (e2) { // if accessors are not working\n                        HTML5_DOMStringMap[propName] = attrVal;\n                    }\n                }\n            }\n            return HTML5_DOMStringMap;\n        }\n    };\n    try {\n        // FF enumerates over element's dataset, but not\n        //   Element.prototype.dataset; IE9 iterates over both\n        Object.defineProperty(Element.prototype, 'dataset', propDescriptor);\n    } catch (e) {\n        propDescriptor.enumerable = false; // IE8 does not allow setting to true\n        Object.defineProperty(Element.prototype, 'dataset', propDescriptor);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/javascript/polyfills/dataset.js\n **/"],"sourceRoot":""}